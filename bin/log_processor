#!/usr/bin/env ruby
# frozen_string_literal: true

boot_file_path = File.expand_path('../lib/boot.rb', __dir__)
require_relative boot_file_path

LOGGER = Logger.new($stdout)
ROOT = File.expand_path('..', __dir__)
OUTPUT_DIR = "#{ROOT}/tmp/reports".freeze
DEFAULT_LOG_PATH = '/log/qgames.log'

def load_arguments
  options = {}
  OptionParser.new do |opts|
    opts.banner = 'Usage: log_processor [options]'
    opts.on('-f', '--file_path FILE_PATH', 'the path of the file') { |v| options[:file_path] = v }
    opts.on('-h', '--help', 'Prints this help') do
      puts opts
      exit
    end
  end.parse!
  options
end

ARGS = load_arguments
LOG_FILE_PATH = DEFAULT_LOG_PATH if ARGS[:file_path].nil?
LOG_FILE_PATH = ARGS[:file_path] unless ARGS[:file_path].nil?

def process_log(file)
  puts "Processing #{file}"
  file_parser = QuakeLogFileParser.new
  File.foreach(File.join(ROOT, file)) do |line|
    file_parser.parse line
  end
  puts "Log #{file} processed correctly"
  file_parser
end

def write_reports(report, report_type: nil)
  output_file = "#{report_type}_#{SecureRandom.urlsafe_base64}.json"
  output_file_path = "#{OUTPUT_DIR}/#{output_file}"
  File.open(output_file_path, 'w') do |f|
    f.write(JSON.pretty_generate(report))
  end
  puts "#{Time.now} -- Finished, generated: #{output_file_path} file, Exiting now."
end

def run
  file_parsed = process_log(LOG_FILE_PATH)
  write_reports(file_parsed.games_report, report_type: 'games')
  write_reports(file_parsed.deaths_report, report_type: 'deaths')
rescue StandardError => e
  LOGGER.error("#{e.class}: #{e.message}")
  LOGGER.error(e.backtrace)
  exit 1
end

FileUtils.mkdir_p OUTPUT_DIR
run
